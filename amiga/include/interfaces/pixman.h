#ifndef PIXMAN_INTERFACE_DEF_H
#define PIXMAN_INTERFACE_DEF_H

/*
** This file was machine generated by idltool 53.5.
** Do not edit
*/ 

#ifndef EXEC_TYPES_H
#include <exec/types.h>
#endif
#ifndef EXEC_EXEC_H
#include <exec/exec.h>
#endif
#ifndef EXEC_INTERFACES_H
#include <exec/interfaces.h>
#endif

#ifndef PIXMAN_H
#include <pixman.h>
#endif

#ifdef __cplusplus
#ifdef __USE_AMIGAOS_NAMESPACE__
namespace AmigaOS {
#endif
extern "C" {
#endif

struct PixmanIFace
{
	struct InterfaceData Data;

	void APICALL (*pixman_transform_init_identity)(struct PixmanIFace *Self, struct pixman_transform * matrix);
	pixman_bool_t APICALL (*pixman_transform_point_3d)(struct PixmanIFace *Self, struct pixman_transform * transform, struct pixman_vector * vector);
	pixman_bool_t APICALL (*pixman_transform_point)(struct PixmanIFace *Self, struct pixman_transform * transform, struct pixman_vector * vector);
	pixman_bool_t APICALL (*pixman_transform_multiply)(struct PixmanIFace *Self, struct pixman_transform * dst, struct pixman_transform * l, struct pixman_transform * r);
	void APICALL (*pixman_transform_init_scale)(struct PixmanIFace *Self, struct pixman_transform * t, pixman_fixed_t sx, pixman_fixed_t sy);
	pixman_bool_t APICALL (*pixman_transform_scale)(struct PixmanIFace *Self, struct pixman_transform * forward, struct pixman_transform * reverse, pixman_fixed_t sx, pixman_fixed_t sy);
	void APICALL (*pixman_transform_init_rotate)(struct PixmanIFace *Self, struct pixman_transform * t, pixman_fixed_t cos, pixman_fixed_t sin);
	pixman_bool_t APICALL (*pixman_transform_rotate)(struct PixmanIFace *Self, struct pixman_transform * forward, struct pixman_transform * reverse, pixman_fixed_t c, pixman_fixed_t s);
	void APICALL (*pixman_transform_init_translate)(struct PixmanIFace *Self, struct pixman_transform * t, pixman_fixed_t tx, pixman_fixed_t ty);
	pixman_bool_t APICALL (*pixman_transform_translate)(struct PixmanIFace *Self, struct pixman_transform * forward, struct pixman_transform * reverse, pixman_fixed_t tx, pixman_fixed_t ty);
	pixman_bool_t APICALL (*pixman_transform_bounds)(struct PixmanIFace *Self, struct pixman_transform * matrix, struct pixman_box16 * b);
	pixman_bool_t APICALL (*pixman_transform_invert)(struct PixmanIFace *Self, struct pixman_transform * dst, struct pixman_transform * src);
	pixman_bool_t APICALL (*pixman_transform_is_identity)(struct PixmanIFace *Self, struct pixman_transform * t);
	pixman_bool_t APICALL (*pixman_transform_is_scale)(struct PixmanIFace *Self, struct pixman_transform * t);
	pixman_bool_t APICALL (*pixman_transform_is_int_translate)(struct PixmanIFace *Self, struct pixman_transform * t);
	pixman_bool_t APICALL (*pixman_transform_is_inverse)(struct PixmanIFace *Self, struct pixman_transform * a, struct pixman_transform * b);
	pixman_bool_t APICALL (*pixman_transform_from_pixman_f_transform)(struct PixmanIFace *Self, struct pixman_transform * t, struct pixman_f_transform * ft);
	void APICALL (*pixman_f_transform_from_pixman_transform)(struct PixmanIFace *Self, struct pixman_f_transform * ft, struct pixman_transform * t);
	pixman_bool_t APICALL (*pixman_f_transform_invert)(struct PixmanIFace *Self, struct pixman_f_transform * dst, struct pixman_f_transform * src);
	pixman_bool_t APICALL (*pixman_f_transform_point)(struct PixmanIFace *Self, struct pixman_f_transform * t, struct pixman_f_vector * v);
	void APICALL (*pixman_f_transform_point_3d)(struct PixmanIFace *Self, struct pixman_f_transform * t, struct pixman_f_vector * v);
	void APICALL (*pixman_f_transform_multiply)(struct PixmanIFace *Self, struct pixman_f_transform * dst, struct pixman_f_transform * l, struct pixman_f_transform * r);
	void APICALL (*pixman_f_transform_init_scale)(struct PixmanIFace *Self, struct pixman_f_transform * t, double sx, double sy);
	pixman_bool_t APICALL (*pixman_f_transform_scale)(struct PixmanIFace *Self, struct pixman_f_transform * forward, struct pixman_f_transform * reverse, double sx, double sy);
	void APICALL (*pixman_f_transform_init_rotate)(struct PixmanIFace *Self, struct pixman_f_transform * t, double cos, double sin);
	pixman_bool_t APICALL (*pixman_f_transform_rotate)(struct PixmanIFace *Self, struct pixman_f_transform * forward, struct pixman_f_transform * reverse, double c, double s);
	void APICALL (*pixman_f_transform_init_translate)(struct PixmanIFace *Self, struct pixman_f_transform * t, double tx, double ty);
	pixman_bool_t APICALL (*pixman_f_transform_translate)(struct PixmanIFace *Self, struct pixman_f_transform * forward, struct pixman_f_transform * reverse, double tx, double ty);
	pixman_bool_t APICALL (*pixman_f_transform_bounds)(struct PixmanIFace *Self, struct pixman_f_transform * t, struct pixman_box16 * b);
	void APICALL (*pixman_f_transform_init_identity)(struct PixmanIFace *Self, struct pixman_f_transform * t);
	void APICALL (*pixman_region_set_static_pointers)(struct PixmanIFace *Self, pixman_box16_t * empty_box, pixman_region16_data_t * empty_data, pixman_region16_data_t * broken_data);
	void APICALL (*pixman_region_init)(struct PixmanIFace *Self, pixman_region16_t * region);
	void APICALL (*pixman_region_init_rect)(struct PixmanIFace *Self, pixman_region16_t * region, int x, int y, unsigned width, unsigned height);
	pixman_bool_t APICALL (*pixman_region_init_rects)(struct PixmanIFace *Self, pixman_region16_t * region, pixman_box16_t * boxes, int count);
	void APICALL (*pixman_region_init_with_extents)(struct PixmanIFace *Self, pixman_region16_t * region, pixman_box16_t * extents);
	void APICALL (*pixman_region_init_from_image)(struct PixmanIFace *Self, pixman_region16_t * region, pixman_image_t * image);
	void APICALL (*pixman_region_fini)(struct PixmanIFace *Self, pixman_region16_t * region);
	void APICALL (*pixman_region_translate)(struct PixmanIFace *Self, pixman_region16_t * region, int x, int y);
	pixman_bool_t APICALL (*pixman_region_copy)(struct PixmanIFace *Self, pixman_region16_t * dest, pixman_region16_t * source);
	pixman_bool_t APICALL (*pixman_region_intersect)(struct PixmanIFace *Self, pixman_region16_t * new_reg, pixman_region16_t * reg1, pixman_region16_t * reg2);
	pixman_bool_t APICALL (*pixman_region_union)(struct PixmanIFace *Self, pixman_region16_t * new_reg, pixman_region16_t * reg1, pixman_region16_t * reg2);
	pixman_bool_t APICALL (*pixman_region_union_rect)(struct PixmanIFace *Self, pixman_region16_t * dest, pixman_region16_t * source, int x, int y, unsigned width, unsigned height);
	pixman_bool_t APICALL (*pixman_region_intersect_rect)(struct PixmanIFace *Self, pixman_region16_t * dest, pixman_region16_t * source, int x, int y, unsigned width, unsigned height);
	pixman_bool_t APICALL (*pixman_region_subtract)(struct PixmanIFace *Self, pixman_region16_t * reg_d, pixman_region16_t * reg_m, pixman_region16_t * reg_s);
	pixman_bool_t APICALL (*pixman_region_inverse)(struct PixmanIFace *Self, pixman_region16_t * new_reg, pixman_region16_t * reg1, pixman_box16_t * inv_rect);
	pixman_bool_t APICALL (*pixman_region_contains_point)(struct PixmanIFace *Self, pixman_region16_t * region, int x, int y, pixman_box16_t * box);
	pixman_region_overlap_t APICALL (*pixman_region_contains_rectangle)(struct PixmanIFace *Self, pixman_region16_t * region, pixman_box16_t * prect);
	pixman_bool_t APICALL (*pixman_region_not_empty)(struct PixmanIFace *Self, pixman_region16_t * region);
	pixman_box16_t * APICALL (*pixman_region_extents)(struct PixmanIFace *Self, pixman_region16_t * region);
	int APICALL (*pixman_region_n_rects)(struct PixmanIFace *Self, pixman_region16_t * region);
	pixman_box16_t * APICALL (*pixman_region_rectangles)(struct PixmanIFace *Self, pixman_region16_t * region, int * n_rects);
	pixman_bool_t APICALL (*pixman_region_equal)(struct PixmanIFace *Self, pixman_region16_t * region1, pixman_region16_t * region2);
	pixman_bool_t APICALL (*pixman_region_selfcheck)(struct PixmanIFace *Self, pixman_region16_t * region);
	void APICALL (*pixman_region_reset)(struct PixmanIFace *Self, pixman_region16_t * region, pixman_box16_t * box);
	void APICALL (*pixman_region_clear)(struct PixmanIFace *Self, pixman_region16_t * region);
	void APICALL (*pixman_region32_init)(struct PixmanIFace *Self, pixman_region32_t * region);
	void APICALL (*pixman_region32_init_rect)(struct PixmanIFace *Self, pixman_region32_t * region, int x, int y, unsigned width, unsigned height);
	pixman_bool_t APICALL (*pixman_region32_init_rects)(struct PixmanIFace *Self, pixman_region32_t * region, pixman_box32_t * boxes, int count);
	void APICALL (*pixman_region32_init_with_extents)(struct PixmanIFace *Self, pixman_region32_t * region, pixman_box32_t * extents);
	void APICALL (*pixman_region32_init_from_image)(struct PixmanIFace *Self, pixman_region32_t * region, pixman_image_t * image);
	void APICALL (*pixman_region32_fini)(struct PixmanIFace *Self, pixman_region32_t * region);
	void APICALL (*pixman_region32_translate)(struct PixmanIFace *Self, pixman_region32_t * region, int x, int y);
	pixman_bool_t APICALL (*pixman_region32_copy)(struct PixmanIFace *Self, pixman_region32_t * dest, pixman_region32_t * source);
	pixman_bool_t APICALL (*pixman_region32_intersect)(struct PixmanIFace *Self, pixman_region32_t * new_reg, pixman_region32_t * reg1, pixman_region32_t * reg2);
	pixman_bool_t APICALL (*pixman_region32_union)(struct PixmanIFace *Self, pixman_region32_t * new_reg, pixman_region32_t * reg1, pixman_region32_t * reg2);
	pixman_bool_t APICALL (*pixman_region32_intersect_rect)(struct PixmanIFace *Self, pixman_region32_t * dest, pixman_region32_t * source, int x, int y, unsigned width, unsigned height);
	pixman_bool_t APICALL (*pixman_region32_union_rect)(struct PixmanIFace *Self, pixman_region32_t * dest, pixman_region32_t * source, int x, int y, unsigned width, unsigned height);
	pixman_bool_t APICALL (*pixman_region32_subtract)(struct PixmanIFace *Self, pixman_region32_t * reg_d, pixman_region32_t * reg_m, pixman_region32_t * reg_s);
	pixman_bool_t APICALL (*pixman_region32_inverse)(struct PixmanIFace *Self, pixman_region32_t * new_reg, pixman_region32_t * reg1, pixman_box32_t * inv_rect);
	pixman_bool_t APICALL (*pixman_region32_contains_point)(struct PixmanIFace *Self, pixman_region32_t * region, int x, int y, pixman_box32_t * box);
	pixman_region_overlap_t APICALL (*pixman_region32_contains_rectangle)(struct PixmanIFace *Self, pixman_region32_t * region, pixman_box32_t * prect);
	pixman_bool_t APICALL (*pixman_region32_not_empty)(struct PixmanIFace *Self, pixman_region32_t * region);
	pixman_box32_t * APICALL (*pixman_region32_extents)(struct PixmanIFace *Self, pixman_region32_t * region);
	int APICALL (*pixman_region32_n_rects)(struct PixmanIFace *Self, pixman_region32_t * region);
	pixman_box32_t * APICALL (*pixman_region32_rectangles)(struct PixmanIFace *Self, pixman_region32_t * region, int * n_rects);
	pixman_bool_t APICALL (*pixman_region32_equal)(struct PixmanIFace *Self, pixman_region32_t * region1, pixman_region32_t * region2);
	pixman_bool_t APICALL (*pixman_region32_selfcheck)(struct PixmanIFace *Self, pixman_region32_t * region);
	void APICALL (*pixman_region32_reset)(struct PixmanIFace *Self, pixman_region32_t * region, pixman_box32_t * box);
	void APICALL (*pixman_region32_clear)(struct PixmanIFace *Self, pixman_region32_t * region);
	pixman_bool_t APICALL (*pixman_blt)(struct PixmanIFace *Self, uint32_t * src_bits, uint32_t * dst_bits, int src_stride, int dst_stride, int src_bpp, int dst_bpp, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
	pixman_bool_t APICALL (*pixman_fill)(struct PixmanIFace *Self, uint32_t * bits, int stride, int bpp, int x, int y, int width, int height, uint32_t _xor);
	int APICALL (*pixman_version)(struct PixmanIFace *Self);
	char * APICALL (*pixman_version_string)(struct PixmanIFace *Self);
	pixman_bool_t APICALL (*pixman_format_supported_destination)(struct PixmanIFace *Self, pixman_format_code_t format);
	pixman_bool_t APICALL (*pixman_format_supported_source)(struct PixmanIFace *Self, pixman_format_code_t format);
	pixman_image_t * APICALL (*pixman_image_create_solid_fill)(struct PixmanIFace *Self, pixman_color_t * color);
	pixman_image_t * APICALL (*pixman_image_create_linear_gradient)(struct PixmanIFace *Self, pixman_point_fixed_t * p1, pixman_point_fixed_t * p2, pixman_gradient_stop_t * stops, int n_stops);
	pixman_image_t * APICALL (*pixman_image_create_radial_gradient)(struct PixmanIFace *Self, pixman_point_fixed_t * inner, pixman_point_fixed_t * outer, pixman_fixed_t inner_radius, pixman_fixed_t outer_radius, pixman_gradient_stop_t * stops, int n_stops);
	pixman_image_t * APICALL (*pixman_image_create_conical_gradient)(struct PixmanIFace *Self, pixman_point_fixed_t * center, pixman_fixed_t angle, pixman_gradient_stop_t * stops, int n_stops);
	pixman_image_t * APICALL (*pixman_image_create_bits)(struct PixmanIFace *Self, pixman_format_code_t format, int width, int height, uint32_t * bits, int rowstride_bytes);
	pixman_image_t * APICALL (*pixman_image_ref)(struct PixmanIFace *Self, pixman_image_t * image);
	pixman_bool_t APICALL (*pixman_image_unref)(struct PixmanIFace *Self, pixman_image_t * image);
	void APICALL (*pixman_image_set_destroy_function)(struct PixmanIFace *Self, pixman_image_t * image, pixman_image_destroy_func_t function, void * data);
	void * APICALL (*pixman_image_get_destroy_data)(struct PixmanIFace *Self, pixman_image_t * image);
	pixman_bool_t APICALL (*pixman_image_set_clip_region)(struct PixmanIFace *Self, pixman_image_t * image, pixman_region16_t * region);
	pixman_bool_t APICALL (*pixman_image_set_clip_region32)(struct PixmanIFace *Self, pixman_image_t * image, pixman_region32_t * region);
	void APICALL (*pixman_image_set_has_client_clip)(struct PixmanIFace *Self, pixman_image_t * image, pixman_bool_t clien_clip);
	pixman_bool_t APICALL (*pixman_image_set_transform)(struct PixmanIFace *Self, pixman_image_t * image, pixman_transform_t * transform);
	void APICALL (*pixman_image_set_repeat)(struct PixmanIFace *Self, pixman_image_t * image, pixman_repeat_t repeat);
	pixman_bool_t APICALL (*pixman_image_set_filter)(struct PixmanIFace *Self, pixman_image_t * image, pixman_filter_t filter, pixman_fixed_t * filter_params, int n_filter_params);
	void APICALL (*pixman_image_set_source_clipping)(struct PixmanIFace *Self, pixman_image_t * image, pixman_bool_t source_clipping);
	void APICALL (*pixman_image_set_alpha_map)(struct PixmanIFace *Self, pixman_image_t * image, pixman_image_t * alpha_map, int16_t x, int16_t y);
	void APICALL (*pixman_image_set_component_alpha)(struct PixmanIFace *Self, pixman_image_t * image, pixman_bool_t component_alpha);
	pixman_bool_t APICALL (*pixman_image_get_component_alpha)(struct PixmanIFace *Self, pixman_image_t * image);
	void APICALL (*pixman_image_set_accessors)(struct PixmanIFace *Self, pixman_image_t * image, pixman_read_memory_func_t read_func, pixman_write_memory_func_t write_func);
	void APICALL (*pixman_image_set_indexed)(struct PixmanIFace *Self, pixman_image_t * image, pixman_indexed_t * indexed);
	uint32_t * APICALL (*pixman_image_get_data)(struct PixmanIFace *Self, pixman_image_t * image);
	int APICALL (*pixman_image_get_width)(struct PixmanIFace *Self, pixman_image_t * image);
	int APICALL (*pixman_image_get_height)(struct PixmanIFace *Self, pixman_image_t * image);
	int APICALL (*pixman_image_get_stride)(struct PixmanIFace *Self, pixman_image_t * image);
	int APICALL (*pixman_image_get_depth)(struct PixmanIFace *Self, pixman_image_t * image);
	pixman_format_code_t APICALL (*pixman_image_get_format)(struct PixmanIFace *Self, pixman_image_t * image);
	pixman_bool_t APICALL (*pixman_image_fill_rectangles)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * image, pixman_color_t * color, int n_rects, pixman_rectangle16_t * rects);
	pixman_bool_t APICALL (*pixman_image_fill_boxes)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * dest, pixman_color_t * color, int n_boxes, pixman_box32_t * boxes);
	pixman_bool_t APICALL (*pixman_compute_composite_region)(struct PixmanIFace *Self, pixman_region16_t * region, pixman_image_t * src_image, pixman_image_t * mask_image, pixman_image_t * dest_image, int16_t src_x, int16_t src_y, int16_t mask_x, int16_t mask_y, int16_t dest_x, int16_t dest_y, uint16_t width, uint16_t height);
	void APICALL (*pixman_image_composite)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * src, pixman_image_t * mask, pixman_image_t * dest, int16_t src_x, int16_t src_y, int16_t mask_x, int16_t mask_y, int16_t dest_x, int16_t dest_y, uint16_t width, uint16_t height);
	void APICALL (*pixman_image_composite32)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * src, pixman_image_t * mask, pixman_image_t * dest, int32_t src_x, int32_t src_y, int32_t mask_x, int32_t mask_y, int32_t dest_x, int32_t dest_y, int32_t width, int32_t height);
	void APICALL (*pixman_disable_out_of_bounds_workaround)(struct PixmanIFace *Self);
	pixman_glyph_cache_t * APICALL (*pixman_glyph_cache_create)(struct PixmanIFace *Self);
	void APICALL (*pixman_glyph_cache_destroy)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache);
	void APICALL (*pixman_glyph_cache_freeze)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache);
	void APICALL (*pixman_glyph_cache_thaw)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache);
	void * APICALL (*pixman_glyph_cache_lookup)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache, void * font_key, void * glyph_key);
	void * APICALL (*pixman_glyph_cache_insert)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache, void * font_key, void * glyph_key, int origin_x, int origin_y, pixman_image_t * glyph_image);
	void APICALL (*pixman_glyph_cache_remove)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache, void * font_key, void * glyph_key);
	void APICALL (*pixman_glyph_get_extents)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache, int n_glyphs, pixman_glyph_t * glyphs, pixman_box32_t * extents);
	pixman_format_code_t APICALL (*pixman_glyph_get_mask_format)(struct PixmanIFace *Self, pixman_glyph_cache_t * cache, int n_glyphs, pixman_glyph_t * glyphs);
	void APICALL (*pixman_composite_glyphs)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * src, pixman_image_t * dest, pixman_format_code_t mask_format, int32_t src_x, int32_t src_y, int32_t mask_x, int32_t mask_y, int32_t dest_x, int32_t dest_y, int32_t width, int32_t height, pixman_glyph_cache_t * cache, int n_glyphs, pixman_glyph_t * glyphs);
	void APICALL (*pixman_composite_glyphs_no_mask)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * src, pixman_image_t * dest, int32_t src_x, int32_t src_y, int32_t dest_x, int32_t dest_y, pixman_glyph_cache_t * cache, int n_glyphs, pixman_glyph_t * glyphs);
	pixman_fixed_t APICALL (*pixman_sample_ceil_y)(struct PixmanIFace *Self, pixman_fixed_t y, int bpp);
	pixman_fixed_t APICALL (*pixman_sample_floor_y)(struct PixmanIFace *Self, pixman_fixed_t y, int bpp);
	void APICALL (*pixman_edge_step)(struct PixmanIFace *Self, pixman_edge_t * e, int n);
	void APICALL (*pixman_edge_init)(struct PixmanIFace *Self, pixman_edge_t * e, int bpp, pixman_fixed_t y_start, pixman_fixed_t x_top, pixman_fixed_t y_top, pixman_fixed_t x_bot, pixman_fixed_t y_bot);
	void APICALL (*pixman_line_fixed_edge_init)(struct PixmanIFace *Self, pixman_edge_t * e, int bpp, pixman_fixed_t y, pixman_line_fixed_t * line, int x_off, int y_off);
	void APICALL (*pixman_rasterize_edges)(struct PixmanIFace *Self, pixman_image_t * image, pixman_edge_t * l, pixman_edge_t * r, pixman_fixed_t t, pixman_fixed_t b);
	void APICALL (*pixman_add_traps)(struct PixmanIFace *Self, pixman_image_t * image, int16_t x_off, int16_t y_off, int ntrap, pixman_trap_t * traps);
	void APICALL (*pixman_add_trapezoids)(struct PixmanIFace *Self, pixman_image_t * image, int16_t x_off, int y_off, int ntraps, pixman_trapezoid_t * traps);
	void APICALL (*pixman_rasterize_trapezoid)(struct PixmanIFace *Self, pixman_image_t * image, pixman_trapezoid_t * trap, int x_off, int y_off);
	void APICALL (*pixman_composite_trapezoids)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * src, pixman_image_t * dst, pixman_format_code_t mask_format, int x_src, int y_src, int x_dst, int y_dst, int n_traps, pixman_trapezoid_t * traps);
	void APICALL (*pixman_composite_triangles)(struct PixmanIFace *Self, pixman_op_t op, pixman_image_t * src, pixman_image_t * dst, pixman_format_code_t mask_format, int x_src, int y_src, int x_dst, int y_dst, int n_tris, pixman_triangle_t * tris);
	void APICALL (*pixman_add_triangles)(struct PixmanIFace *Self, pixman_image_t * image, int32_t x_off, int32_t y_off, int n_tris, pixman_triangle_t * tris);
};

#ifdef __cplusplus
}
#ifdef __USE_AMIGAOS_NAMESPACE__
}
#endif
#endif

#endif /* PIXMAN_INTERFACE_DEF_H */
